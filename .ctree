projman3-webui-new/
├── README.md
│       This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).
│       
│       ## Getting Started
│       
│       First, run the development server:
│       
│       ```bash
│       npm run dev
│       # or
│       yarn dev
│       # or
│       pnpm dev
│       # or
│       bun dev
│       ```
│       
│       Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
│       
│       You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.
│       
│       This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.
│       
│       ## Learn More
│       
│       To learn more about Next.js, take a look at the following resources:
│       
│       - [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
│       - [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
│       
│       You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!
│       
│       ## Deploy on Vercel
│       
│       The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.
│       
│       Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
├── app/
│   ├── favicon.ico
│   ├── globals.css
│   ├── layout.tsx
│   │       import type { Metadata } from "next";
│   │       import { Geist, Geist_Mono } from "next/font/google";
│   │       import "./globals.css";
│   │       
│   │       const geistSans = Geist({
│   │         variable: "--font-geist-sans",
│   │         subsets: ["latin"],
│   │       });
│   │       
│   │       const geistMono = Geist_Mono({
│   │         variable: "--font-geist-mono",
│   │         subsets: ["latin"],
│   │       });
│   │       
│   │       export const metadata: Metadata = {
│   │         title: "Create Next App",
│   │         description: "Generated by create next app",
│   │       };
│   │       
│   │       export default function RootLayout({
│   │         children,
│   │       }: Readonly<{
│   │         children: React.ReactNode;
│   │       }>) {
│   │         return (
│   │           <html lang="en">
│   │             <body
│   │               className={`${geistSans.variable} ${geistMono.variable} antialiased`}
│   │             >
│   │               {children}
│   │             </body>
│   │           </html>
│   │         );
│   │       }
│   └── page.tsx
│           'use client'
│           
│           import React from 'react'
│           import { TaskTable } from '@/components/TaskTable/TaskTable'
│           
│           export default function TasksPage() {
│             return (
│               <div className="container mx-auto py-10">
│                 <TaskTable />
│               </div>
│             )
│           }
├── components/
│   ├── DataTableControlGroup/
│   │   ├── DataTable.tsx
│   │   │       // components/DataTableControlGroup/DataTable.tsx
│   │   │       import {
│   │   │         Table,
│   │   │         TableBody,
│   │   │         TableCell,
│   │   │         TableHead,
│   │   │         TableHeader,
│   │   │         TableRow,
│   │   │       } from "@/components/ui/table"
│   │   │       import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
│   │   │       import { Button } from "@/components/ui/button"
│   │   │       import { DataTableActionPopover } from "./DataTableActionPopover"
│   │   │       import { Plus } from "lucide-react"
│   │   │       import { BaseItem, DataTableProps } from "@/types/DataTableTypes"
│   │   │       
│   │   │       export function DataTable<T extends BaseItem>({
│   │   │         data,
│   │   │         columns,
│   │   │         actions,
│   │   │         title,
│   │   │         addNewItem,
│   │   │       }: DataTableProps<T>) {
│   │   │         const finalColumns = [
│   │   │           ...columns,
│   │   │           {
│   │   │             accessorKey: 'actions',
│   │   │             header: '', // Removed the "Actions" label
│   │   │             cell: ({ row }: { row: { original: T } }) => (
│   │   │               <DataTableActionPopover item={row.original} actions={actions} />
│   │   │             ),
│   │   │           },
│   │   │         ]
│   │   │       
│   │   │         const formatCellValue = (item: T, accessorKey: keyof T | 'actions'): string => {
│   │   │           if (accessorKey === 'actions') return '';
│   │   │           
│   │   │           const value = item[accessorKey];
│   │   │           
│   │   │           // Handle dates specifically
│   │   │           if (accessorKey === 'createdAt' || accessorKey === 'updatedAt') {
│   │   │             const dateValue = value as unknown as Date;
│   │   │             return dateValue instanceof Date 
│   │   │               ? dateValue.toLocaleDateString()
│   │   │               : new Date(dateValue).toLocaleDateString();
│   │   │           }
│   │   │           
│   │   │           return String(value);
│   │   │         }
│   │   │       
│   │   │         return (
│   │   │           <Card>
│   │   │             <CardHeader className="flex flex-row items-center justify-between">
│   │   │               <CardTitle>{title}</CardTitle>
│   │   │               {addNewItem && (
│   │   │                 <Button onClick={addNewItem} size="sm">
│   │   │                   <Plus className="w-4 h-4 mr-2" />
│   │   │                   Add New
│   │   │                 </Button>
│   │   │               )}
│   │   │             </CardHeader>
│   │   │             <CardContent>
│   │   │               <Table>
│   │   │                 <TableHeader>
│   │   │                   <TableRow>
│   │   │                     {finalColumns.map((column) => (
│   │   │                       <TableHead key={String(column.accessorKey)}>
│   │   │                         {column.header}
│   │   │                       </TableHead>
│   │   │                     ))}
│   │   │                   </TableRow>
│   │   │                 </TableHeader>
│   │   │                 <TableBody>
│   │   │                   {data.map((item: T) => (
│   │   │                     <TableRow key={item.id}>
│   │   │                       {finalColumns.map((column) => (
│   │   │                         <TableCell key={`${item.id}-${String(column.accessorKey)}`}>
│   │   │                           {column.cell 
│   │   │                             ? column.cell({ row: { original: item } })
│   │   │                             : formatCellValue(item, column.accessorKey)}
│   │   │                         </TableCell>
│   │   │                       ))}
│   │   │                     </TableRow>
│   │   │                   ))}
│   │   │                 </TableBody>
│   │   │               </Table>
│   │   │             </CardContent>
│   │   │           </Card>
│   │   │         )
│   │   │       }
│   │   ├── DataTableActionPopover.tsx
│   │   │       // components/DataTableControlGroup/DataTableActionPopover.tsx
│   │   │       import React from 'react';
│   │   │       import {
│   │   │         Popover,
│   │   │         PopoverContent,
│   │   │         PopoverTrigger,
│   │   │       } from "@/components/ui/popover";
│   │   │       import { Button } from "@/components/ui/button";
│   │   │       import { MoreHorizontal } from "lucide-react";
│   │   │       import { BaseItem } from '@/types/DataTableTypes';
│   │   │       
│   │   │       interface DataTableActionPopoverProps<T extends BaseItem> {
│   │   │         item: T;
│   │   │         actions: ActionConfig<T>[];
│   │   │       }
│   │   │       
│   │   │       export function DataTableActionPopover<T extends BaseItem>({
│   │   │         item,
│   │   │         actions,
│   │   │       }: DataTableActionPopoverProps<T>) {
│   │   │         return (
│   │   │           <Popover>
│   │   │             <PopoverTrigger asChild>
│   │   │               <Button variant="ghost" className="h-8 w-8 p-0">
│   │   │                 <MoreHorizontal className="h-4 w-4" />
│   │   │                 <span className="sr-only">Open menu</span>
│   │   │               </Button>
│   │   │             </PopoverTrigger>
│   │   │             <PopoverContent className="w-56" align="end">
│   │   │               <div className="space-y-2">
│   │   │                 {actions.map((action, index) => (
│   │   │                   <Button
│   │   │                     key={index}
│   │   │                     variant={action.variant || "ghost"}
│   │   │                     className="w-full justify-start"
│   │   │                     onClick={() => action.action(item)}
│   │   │                   >
│   │   │                     {action.label}
│   │   │                   </Button>
│   │   │                 ))}
│   │   │               </div>
│   │   │             </PopoverContent>
│   │   │           </Popover>
│   │   │         );
│   │   │       }
│   │   └── index.ts
│   │           export * from './DataTable';
│   │           export * from './DataTableActionPopover';
│   ├── TaskTable/
│   │   ├── TaskTable.tsx
│   │   │       // app/components/TaskTable/TaskTable.tsx
│   │   │       import React from 'react';
│   │   │       import { DataTable } from '../DataTableControlGroup/DataTable';
│   │   │       import { Task } from '@/types/task';
│   │   │       import { useTaskStore } from '@/store/taskStore';
│   │   │       import { ColumnConfig } from '@/types/DataTableTypes';
│   │   │       
│   │   │       export function TaskTable() {
│   │   │         const { tasks, updateTask, deleteTask, addTask } = useTaskStore();
│   │   │       
│   │   │         const columns: ColumnConfig<Task>[] = [
│   │   │           { 
│   │   │             accessorKey: 'title',
│   │   │             header: 'Title'
│   │   │           },
│   │   │           { 
│   │   │             accessorKey: 'status',
│   │   │             header: 'Status',
│   │   │             cell: ({ row }) => (
│   │   │               <span className={
│   │   │                 row.original.status === 'completed' ? 'text-green-600' :
│   │   │                 row.original.status === 'in-progress' ? 'text-blue-600' :
│   │   │                 'text-gray-600'
│   │   │               }>
│   │   │                 {row.original.status}
│   │   │               </span>
│   │   │             )
│   │   │           },
│   │   │           { 
│   │   │             accessorKey: 'description',
│   │   │             header: 'Description'
│   │   │           },
│   │   │           { 
│   │   │             accessorKey: 'updatedAt',
│   │   │             header: 'Last Updated',
│   │   │             cell: ({ row }) => new Date(row.original.updatedAt).toLocaleDateString()
│   │   │           }
│   │   │         ];
│   │   │       
│   │   │         const actions = [
│   │   │           {
│   │   │             label: 'Mark In Progress',
│   │   │             action: (task: Task) => updateTask(task.id, { status: 'in-progress' }),
│   │   │             variant: 'secondary' as const
│   │   │           },
│   │   │           {
│   │   │             label: 'Mark Complete',
│   │   │             action: (task: Task) => updateTask(task.id, { status: 'completed' }),
│   │   │             variant: 'default' as const
│   │   │           },
│   │   │           {
│   │   │             label: 'Delete',
│   │   │             action: (task: Task) => deleteTask(task.id),
│   │   │             variant: 'destructive' as const
│   │   │           }
│   │   │         ];
│   │   │       
│   │   │         const handleAddNewTask = () => {
│   │   │           addTask({
│   │   │             title: 'New Task',
│   │   │             description: 'Add description here',
│   │   │             status: 'todo'
│   │   │           });
│   │   │         };
│   │   │       
│   │   │         return (
│   │   │           <DataTable<Task>
│   │   │             data={tasks}
│   │   │             columns={columns}
│   │   │             actions={actions}
│   │   │             title="Tasks"
│   │   │             addNewItem={handleAddNewTask}
│   │   │           />
│   │   │         );
│   │   │       }
│   │   └── TaskTypes.ts
│   │           // app/components/TaskTable/TaskTypes.ts
│   │           import { BaseItem } from '@/types/DataTableTypes';
│   │           
│   │           export interface Task extends BaseItem {
│   │             title: string;
│   │             description: string;
│   │             status: 'todo' | 'in-progress' | 'completed';
│   │           }
│   └── ui/
│       ├── button.tsx
│       │       // components/ui/button.tsx
│       │       import * as React from "react"
│       │       import { cva, type VariantProps } from "class-variance-authority"
│       │       import { cn } from "@/lib/utils"
│       │       
│       │       const buttonVariants = cva(
│       │         "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background",
│       │         {
│       │           variants: {
│       │             variant: {
│       │               default: "bg-primary text-primary-foreground hover:bg-primary/90",
│       │               destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
│       │               outline: "border border-input hover:bg-accent hover:text-accent-foreground",
│       │               secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
│       │               ghost: "hover:bg-accent hover:text-accent-foreground",
│       │               link: "underline-offset-4 hover:underline text-primary",
│       │             },
│       │             size: {
│       │               default: "h-10 py-2 px-4",
│       │               sm: "h-9 px-3 rounded-md",
│       │               lg: "h-11 px-8 rounded-md",
│       │               icon: "h-10 w-10",
│       │             },
│       │           },
│       │           defaultVariants: {
│       │             variant: "default",
│       │             size: "default",
│       │           },
│       │         }
│       │       )
│       │       
│       │       export interface ButtonProps
│       │         extends React.ButtonHTMLAttributes<HTMLButtonElement>,
│       │           VariantProps<typeof buttonVariants> {}
│       │       
│       │       const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
│       │         ({ className, variant, size, ...props }, ref) => {
│       │           return (
│       │             <button
│       │               className={cn(buttonVariants({ variant, size, className }))}
│       │               ref={ref}
│       │               {...props}
│       │             />
│       │           )
│       │         }
│       │       )
│       │       Button.displayName = "Button"
│       │       
│       │       export { Button, buttonVariants }
│       ├── card.tsx
│       │       // components/ui/card.tsx
│       │       import * as React from "react"
│       │       import { cn } from "@/lib/utils"
│       │       
│       │       const Card = React.forwardRef<
│       │         HTMLDivElement,
│       │         React.HTMLAttributes<HTMLDivElement>
│       │       >(({ className, ...props }, ref) => (
│       │         <div
│       │           ref={ref}
│       │           className={cn(
│       │             "rounded-lg border bg-card text-card-foreground shadow-sm",
│       │             className
│       │           )}
│       │           {...props}
│       │         />
│       │       ))
│       │       Card.displayName = "Card"
│       │       
│       │       const CardHeader = React.forwardRef<
│       │         HTMLDivElement,
│       │         React.HTMLAttributes<HTMLDivElement>
│       │       >(({ className, ...props }, ref) => (
│       │         <div
│       │           ref={ref}
│       │           className={cn("flex flex-col space-y-1.5 p-6", className)}
│       │           {...props}
│       │         />
│       │       ))
│       │       CardHeader.displayName = "CardHeader"
│       │       
│       │       const CardTitle = React.forwardRef<
│       │         HTMLParagraphElement,
│       │         React.HTMLAttributes<HTMLHeadingElement>
│       │       >(({ className, ...props }, ref) => (
│       │         <h3
│       │           ref={ref}
│       │           className={cn(
│       │             "text-2xl font-semibold leading-none tracking-tight",
│       │             className
│       │           )}
│       │           {...props}
│       │         />
│       │       ))
│       │       CardTitle.displayName = "CardTitle"
│       │       
│       │       const CardContent = React.forwardRef<
│       │         HTMLDivElement,
│       │         React.HTMLAttributes<HTMLDivElement>
│       │       >(({ className, ...props }, ref) => (
│       │         <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
│       │       ))
│       │       CardContent.displayName = "CardContent"
│       │       
│       │       export { Card, CardHeader, CardTitle, CardContent }
│       ├── popover.tsx
│       │       "use client"
│       │       
│       │       import * as React from "react"
│       │       import * as PopoverPrimitive from "@radix-ui/react-popover"
│       │       
│       │       import { cn } from "@/lib/utils"
│       │       
│       │       const Popover = PopoverPrimitive.Root
│       │       
│       │       const PopoverTrigger = PopoverPrimitive.Trigger
│       │       
│       │       const PopoverAnchor = PopoverPrimitive.Anchor
│       │       
│       │       const PopoverContent = React.forwardRef<
│       │         React.ElementRef<typeof PopoverPrimitive.Content>,
│       │         React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
│       │       >(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
│       │         <PopoverPrimitive.Portal>
│       │           <PopoverPrimitive.Content
│       │             ref={ref}
│       │             align={align}
│       │             sideOffset={sideOffset}
│       │             className={cn(
│       │               "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
│       │               className
│       │             )}
│       │             {...props}
│       │           />
│       │         </PopoverPrimitive.Portal>
│       │       ))
│       │       PopoverContent.displayName = PopoverPrimitive.Content.displayName
│       │       
│       │       export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }
│       └── table.tsx
│               import * as React from "react"
│               
│               import { cn } from "@/lib/utils"
│               
│               const Table = React.forwardRef<
│                 HTMLTableElement,
│                 React.HTMLAttributes<HTMLTableElement>
│               >(({ className, ...props }, ref) => (
│                 <div className="relative w-full overflow-auto">
│                   <table
│                     ref={ref}
│                     className={cn("w-full caption-bottom text-sm", className)}
│                     {...props}
│                   />
│                 </div>
│               ))
│               Table.displayName = "Table"
│               
│               const TableHeader = React.forwardRef<
│                 HTMLTableSectionElement,
│                 React.HTMLAttributes<HTMLTableSectionElement>
│               >(({ className, ...props }, ref) => (
│                 <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
│               ))
│               TableHeader.displayName = "TableHeader"
│               
│               const TableBody = React.forwardRef<
│                 HTMLTableSectionElement,
│                 React.HTMLAttributes<HTMLTableSectionElement>
│               >(({ className, ...props }, ref) => (
│                 <tbody
│                   ref={ref}
│                   className={cn("[&_tr:last-child]:border-0", className)}
│                   {...props}
│                 />
│               ))
│               TableBody.displayName = "TableBody"
│               
│               const TableFooter = React.forwardRef<
│                 HTMLTableSectionElement,
│                 React.HTMLAttributes<HTMLTableSectionElement>
│               >(({ className, ...props }, ref) => (
│                 <tfoot
│                   ref={ref}
│                   className={cn(
│                     "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
│                     className
│                   )}
│                   {...props}
│                 />
│               ))
│               TableFooter.displayName = "TableFooter"
│               
│               const TableRow = React.forwardRef<
│                 HTMLTableRowElement,
│                 React.HTMLAttributes<HTMLTableRowElement>
│               >(({ className, ...props }, ref) => (
│                 <tr
│                   ref={ref}
│                   className={cn(
│                     "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
│                     className
│                   )}
│                   {...props}
│                 />
│               ))
│               TableRow.displayName = "TableRow"
│               
│               const TableHead = React.forwardRef<
│                 HTMLTableCellElement,
│                 React.ThHTMLAttributes<HTMLTableCellElement>
│               >(({ className, ...props }, ref) => (
│                 <th
│                   ref={ref}
│                   className={cn(
│                     "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
│                     className
│                   )}
│                   {...props}
│                 />
│               ))
│               TableHead.displayName = "TableHead"
│               
│               const TableCell = React.forwardRef<
│                 HTMLTableCellElement,
│                 React.TdHTMLAttributes<HTMLTableCellElement>
│               >(({ className, ...props }, ref) => (
│                 <td
│                   ref={ref}
│                   className={cn(
│                     "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
│                     className
│                   )}
│                   {...props}
│                 />
│               ))
│               TableCell.displayName = "TableCell"
│               
│               const TableCaption = React.forwardRef<
│                 HTMLTableCaptionElement,
│                 React.HTMLAttributes<HTMLTableCaptionElement>
│               >(({ className, ...props }, ref) => (
│                 <caption
│                   ref={ref}
│                   className={cn("mt-4 text-sm text-muted-foreground", className)}
│                   {...props}
│                 />
│               ))
│               TableCaption.displayName = "TableCaption"
│               
│               export {
│                 Table,
│                 TableHeader,
│                 TableBody,
│                 TableFooter,
│                 TableHead,
│                 TableRow,
│                 TableCell,
│                 TableCaption,
│               }
├── components.json
│       {
│         "$schema": "https://ui.shadcn.com/schema.json",
│         "style": "new-york",
│         "rsc": true,
│         "tsx": true,
│         "tailwind": {
│           "config": "tailwind.config.ts",
│           "css": "app/globals.css",
│           "baseColor": "neutral",
│           "cssVariables": true,
│           "prefix": ""
│         },
│         "aliases": {
│           "components": "@/components",
│           "utils": "@/lib/utils",
│           "ui": "@/components/ui",
│           "lib": "@/lib",
│           "hooks": "@/hooks"
│         },
│         "iconLibrary": "lucide"
│       }
├── docs/
│   ├── objective_one.md
│   │       we are gonna start of with only tasks
│   ├── revelations.md
│   │       lets make a generic control system for this, what should we call it? tablePopoverControlGroup? this way we can add items. we want to reuse this system for other types later
│   │       
│   │       
│   ├── stack.md
│   │       let's use:
│   │       zustand
│   │       prisma
│   │       pnpm
│   │       
│   │       shadcn:
│   │       data-table
│   │       pop-over
│   │       
│   │       pnpm add zustand
│   │       pnpm add @radix-ui/react-popover
│   │       pnpm add @tanstack/react-table
│   │       pnpm dlx shadcn-ui@latest init
│   │       pnpm dlx shadcn-ui@latest add popover
│   │       pnpm dlx shadcn-ui@latest add table
│   └── whats_the_idea.md
│           we should have 2 main views. 
│           
│           dashboard & timeline
│           
│           we will have:
│           timeline projects
│           objectives
│           tasks
│           
│           
│           timeline projects are goals, objectives are means to those goals, and tasks are when you execute, or plan to
│           
│           we will use a dynamic basecard system for independent state managment by type-item
│           
│           this way we can have stats in the dashboard, and options for displaying projects, objectives, and tasks. 
│           
│           a task can be created without an objective or project
│           an objective can be independent as well.
│           
│           
│           in order to start executing this plan we should start with a dashboard with task cards
│           that have state managment. we will add, modify and mark complete
│           
│           we can use a 2 tiered toggle group to allow the user to control the layout
│           
│           
│           can we use table and sheet together?
│           
│           task modify pop-over
├── eslint.config.mjs
├── next-env.d.ts
│       /// <reference types="next" />
│       /// <reference types="next/image-types/global" />
│       
│       // NOTE: This file should not be edited
│       // see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
├── next.config.ts
│       import type { NextConfig } from "next";
│       
│       const nextConfig: NextConfig = {
│         /* config options here */
│       };
│       
│       export default nextConfig;
├── package.json
│       {
│         "name": "projman3-webui-new",
│         "version": "0.1.0",
│         "private": true,
│         "scripts": {
│           "dev": "next dev",
│           "build": "next build",
│           "start": "next start",
│           "lint": "next lint"
│         },
│         "dependencies": {
│           "@radix-ui/react-popover": "^1.1.6",
│           "@radix-ui/react-slot": "^1.1.2",
│           "@tanstack/react-table": "^8.21.2",
│           "class-variance-authority": "^0.7.1",
│           "clsx": "^2.1.1",
│           "lucide-react": "^0.475.0",
│           "next": "15.1.7",
│           "react": "^19.0.0",
│           "react-dom": "^19.0.0",
│           "tailwind-merge": "^3.0.1",
│           "tailwindcss-animate": "^1.0.7",
│           "zustand": "^5.0.3"
│         },
│         "devDependencies": {
│           "@eslint/eslintrc": "^3",
│           "@types/node": "^20",
│           "@types/react": "^19",
│           "@types/react-dom": "^19",
│           "@types/react-table": "^7.7.20",
│           "eslint": "^9",
│           "eslint-config-next": "15.1.7",
│           "postcss": "^8",
│           "tailwindcss": "^3.4.1",
│           "typescript": "^5"
│         }
│       }
├── pnpm-lock.yaml
├── postcss.config.mjs
├── store/
│   └── taskStore.ts
│           // app/store/taskStore.ts
│           'use client'
│           
│           import { create } from 'zustand'
│           import { Task } from '@/types/task'
│           import { StateCreator } from 'zustand'
│           
│           type TaskInput = Omit<Task, 'id' | 'createdAt' | 'updatedAt'>
│           
│           interface TaskState {
│             tasks: Task[]
│             addTask: (task: TaskInput) => void
│             updateTask: (id: string, updates: Partial<Task>) => void
│             deleteTask: (id: string) => void
│           }
│           
│           export const useTaskStore = create<TaskState>((set: StateCreator<TaskState>) => ({
│             tasks: [],
│             addTask: (taskData: TaskInput) => set((state: TaskState) => ({
│               tasks: [...state.tasks, {
│                 ...taskData,
│                 id: crypto.randomUUID(),
│                 createdAt: new Date(),
│                 updatedAt: new Date(),
│               }]
│             })),
│             updateTask: (id: string, updates: Partial<Task>) => set((state: TaskState) => ({
│               tasks: state.tasks.map((task: Task) => 
│                 task.id === id ? { ...task, ...updates, updatedAt: new Date() } : task
│               )
│             })),
│             deleteTask: (id: string) => set((state: TaskState) => ({
│               tasks: state.tasks.filter((task: Task) => task.id !== id)
│             }))
│           }))
├── tailwind.config.ts
│       import type { Config } from "tailwindcss";
│       
│       export default {
│           darkMode: ["class"],
│           content: [
│           "./pages/**/*.{js,ts,jsx,tsx,mdx}",
│           "./components/**/*.{js,ts,jsx,tsx,mdx}",
│           "./app/**/*.{js,ts,jsx,tsx,mdx}",
│         ],
│         theme: {
│         	extend: {
│         		colors: {
│         			background: 'hsl(var(--background))',
│         			foreground: 'hsl(var(--foreground))',
│         			card: {
│         				DEFAULT: 'hsl(var(--card))',
│         				foreground: 'hsl(var(--card-foreground))'
│         			},
│         			popover: {
│         				DEFAULT: 'hsl(var(--popover))',
│         				foreground: 'hsl(var(--popover-foreground))'
│         			},
│         			primary: {
│         				DEFAULT: 'hsl(var(--primary))',
│         				foreground: 'hsl(var(--primary-foreground))'
│         			},
│         			secondary: {
│         				DEFAULT: 'hsl(var(--secondary))',
│         				foreground: 'hsl(var(--secondary-foreground))'
│         			},
│         			muted: {
│         				DEFAULT: 'hsl(var(--muted))',
│         				foreground: 'hsl(var(--muted-foreground))'
│         			},
│         			accent: {
│         				DEFAULT: 'hsl(var(--accent))',
│         				foreground: 'hsl(var(--accent-foreground))'
│         			},
│         			destructive: {
│         				DEFAULT: 'hsl(var(--destructive))',
│         				foreground: 'hsl(var(--destructive-foreground))'
│         			},
│         			border: 'hsl(var(--border))',
│         			input: 'hsl(var(--input))',
│         			ring: 'hsl(var(--ring))',
│         			chart: {
│         				'1': 'hsl(var(--chart-1))',
│         				'2': 'hsl(var(--chart-2))',
│         				'3': 'hsl(var(--chart-3))',
│         				'4': 'hsl(var(--chart-4))',
│         				'5': 'hsl(var(--chart-5))'
│         			}
│         		},
│         		borderRadius: {
│         			lg: 'var(--radius)',
│         			md: 'calc(var(--radius) - 2px)',
│         			sm: 'calc(var(--radius) - 4px)'
│         		}
│         	}
│         },
│         plugins: [require("tailwindcss-animate")],
│       } satisfies Config;
├── tsconfig.json
│       {
│         "compilerOptions": {
│           "target": "ES2017",
│           "lib": ["dom", "dom.iterable", "esnext"],
│           "allowJs": true,
│           "skipLibCheck": true,
│           "strict": true,
│           "noEmit": true,
│           "esModuleInterop": true,
│           "module": "esnext",
│           "moduleResolution": "bundler",
│           "resolveJsonModule": true,
│           "isolatedModules": true,
│           "jsx": "preserve",
│           "incremental": true,
│           "plugins": [
│             {
│               "name": "next"
│             }
│           ],
│           "paths": {
│             "@/*": ["./*"]
│           }
│         },
│         "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
│         "exclude": ["node_modules"]
│       }
└── types/
    ├── DataTableTypes.ts
    │       // app/types/DataTableTypes.ts
    │       export interface BaseItem {
    │         id: string;
    │         createdAt: Date;
    │         updatedAt: Date;
    │       }
    │       
    │       export type ColumnConfig<T> = {
    │         accessorKey: keyof T | 'actions';
    │         header: string;
    │         cell?: (props: { row: { original: T } }) => React.ReactNode;
    │       }
    │       
    │       export type ActionConfig<T> = {
    │         label: string;
    │         action: (item: T) => void;
    │         variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';
    │       }
    │       
    │       export interface DataTableProps<T extends BaseItem> {
    │         data: T[];
    │         columns: ColumnConfig<T>[];
    │         actions: ActionConfig<T>[];
    │         title: string;
    │         addNewItem?: () => void;
    │       }
    └── task.ts
            // app/types/task.ts
            import { BaseItem } from './DataTableTypes'
            
            export interface Task extends BaseItem {
              title: string;
              description: string;
              status: 'todo' | 'in-progress' | 'completed';
            }
